public class CardPile {
  
  private Card[] cards;
  private int numCards;
  
  public CardPile(Card[] theCards, int theNumCards) {
    
    cards = new Card[52];
    
    int numcards = 0;
  }

 public void addToBottom(Card c) {
  
   int i = numCards;
   cards[i] = c;
   numCards++;
  }
        
 public boolean isEmpty() {
   
   Card[] cards = new Card[0];
   if(cards.length == 0);{
     return true;
   }
 }
 
 public Card get(int i){
   
   if(i < cards.length && i > numCards){
     return null;
   }
   return cards[i];
 }
   
 //public Card remove(int i){
   
 
//}

 public int find(Suit s, Value v) {
   
   for(int i = 0; i < numCards; i++){
     if(cards[i].getSuit() == s && cards[i].getValue() == v){
       return i;
     }
   }
   return -1;
 }
   
 public String toString() {
   
   String cardPileString = "";
   for(int i = 0; i < 52; i++){
     if(cards[i] != null){
     cardPileString = cardPileString + i + "." + cards[i].toString() + " "; 
   }
   
   }
 return cardPileString;
 }

 public static Card[] makeFullDeck(Card[] cards) {
   
   
   int i = 0;
   for(Value v : Value.values()) {
     for(Suit s : Suit.values()) {
       cards [i] = Card(Suit.s, Value.v);
     }
   }
   UtilityCode.shuffle(cards, 52);
   
   return cards;
 }

}